import React, { useEffect, useState } from 'react';
import {
  Box,
  Typography,
  Avatar,
  IconButton,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Checkbox,
  FormControlLabel,
  CircularProgress,
} from '@mui/material';
import axios from 'axios';
import { jwtDecode } from 'jwt-decode';

import MailOutlineIcon from '@mui/icons-material/MailOutline';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
import LinkedInIcon from '@mui/icons-material/LinkedIn';
import GitHubIcon from '@mui/icons-material/GitHub';
import InstagramIcon from '@mui/icons-material/Instagram';

import EditIcon from '@mui/icons-material/Edit';
import MoreVertIcon from '@mui/icons-material/MoreVert';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';


const neonIconStyle = {
  color: 'white',
  transition: 'transform 0.3s ease, filter 0.3s ease',
  filter: 'drop-shadow(0 0 6px rgb(0, 0, 0)) drop-shadow(0 0 10px rgb(61, 14, 148))',
  '&:hover': {
    transform: 'scale(1.3)',
    filter: 'drop-shadow(0 0 12px rgb(255, 255, 255)) drop-shadow(0 0 20px #ffbbff)',
  },
};

const About = () => {

  const [anchorEl, setAnchorEl] = useState(null);
  const [menuItemId, setMenuItemId] = useState(null);

  const [aboutData, setAboutData] = useState([]);
  const [loading, setLoading] = useState(true);

  // Admin kontrolü: sessionStorage'dan kontrol
  const [isAdmin, setIsAdmin] = useState(false);

  

  // Düzenleme modalı
  const [editOpen, setEditOpen] = useState(false);
  const [currentEdit, setCurrentEdit] = useState({ id: null, text: '' });
  const [editLoading, setEditLoading] = useState(false);

  // Silme modalı
  const [deleteOpen, setDeleteOpen] = useState(false);
  const [currentDelete, setCurrentDelete] = useState({ id: null, text: '' });
  const [confirmDelete, setConfirmDelete] = useState(false);
  const [deleteLoading, setDeleteLoading] = useState(false);

useEffect(() => {
  const token = sessionStorage.getItem('token');
  let admin = false;
  if (token) {
    try {
      const decoded = jwtDecode(token);
      admin = decoded.isAdmin === true;
    } catch (error) {
      console.error('Token decode error:', error);
    }
  }

  console.log('Token:', token);
  console.log('isAdmin (decoded):', admin);

  setIsAdmin(admin);
  fetchAboutData();
}, []);

  // getText için token yok
  const fetchAboutData = () => {
    setLoading(true);
    axios
      .get('http://localhost:3003/about/getText') // token yok
      .then((response) => {
        setAboutData(response.data);
        setLoading(false);
      })
      .catch((error) => {
        console.error('Veri getirilemedi', error);
        setLoading(false);
      });
  };

  // Düzenleme aç
  const handleEditOpen = (item) => {
    setCurrentEdit(item);
    setEditOpen(true);
  };

  // Düzenleme kapat
  const handleEditClose = () => {
    setEditOpen(false);
    setCurrentEdit({ id: null, text: '' });
  };

  const handleMenuOpen = (event, id) => {
  setAnchorEl(event.currentTarget);
  setMenuItemId(id);
};

const handleMenuClose = () => {
  setAnchorEl(null);
  setMenuItemId(null);
};

  // Düzenleme kaydet (token ile)
  const handleEditSave = () => {
    setEditLoading(true);
    const token = sessionStorage.getItem('token') || '';
    axios
      .put(
        `http://localhost:3003/about/updateText/${currentEdit.id}`,
        { text: currentEdit.text },
        { headers: { Authorization: `Bearer ${token}` } }
      )
      .then(() => {
        // Güncellenen metni state içinde güncelle
        setAboutData((prev) =>
          prev.map((item) =>
            item.id === currentEdit.id ? { ...item, text: currentEdit.text } : item
          )
        );
        setEditLoading(false);
        handleEditClose();
      })
      .catch(() => {
        alert('Yetkisiz veya hata oluştu');
        setEditLoading(false);
      });
  };

  // Silme aç
  const handleDeleteOpen = (item) => {
    setCurrentDelete(item);
    setConfirmDelete(false);
    setDeleteOpen(true);
  };

  // Silme kapat
  const handleDeleteClose = () => {
    setDeleteOpen(false);
    setCurrentDelete({ id: null, text: '' });
    setConfirmDelete(false);
  };

  // Silme onayla ve işle (token ile)
  const handleDeleteConfirm = () => {
    setDeleteLoading(true);
    const token = sessionStorage.getItem('token') || '';
    axios
      .delete(`http://localhost:3003/about/deleteText/${currentDelete.id}`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then(() => {
        setAboutData((prev) => prev.filter((item) => item.id !== currentDelete.id));
        setDeleteLoading(false);
        handleDeleteClose();
      })
      .catch(() => {
        alert('Silme işlemi başarısız.');
        setDeleteLoading(false);
      });
  };

  return (
    <Box
      id="about"
      sx={{
        minHeight: '100vh',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        p: 2,
        overflowY: 'auto',
      }}
    >
      <Box
        sx={{
          display: 'flex',
          flexDirection: { xs: 'column', md: 'row' },
          width: { xs: '100%', sm: '90%', md: '70%' },
          boxShadow: 6,
          borderRadius: 4,
          overflow: 'hidden',
        }}
      >
        {/* Sol Kısım */}
        <Box
          sx={{
            width: { xs: '90%', md: '30%' },
            background:
              'linear-gradient(to bottom,rgb(27, 186, 214),rgb(12, 150, 192),rgb(60, 48, 218))',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            p: 3,
          }}
        >
          <Avatar
            src="asd.jpg"
            alt="Yakup Şimşek"
            sx={{
              width: { xs: 120, sm: 160, md: 200 },
              height: { xs: 120, sm: 160, md: 200 },
              mb: 2,
              border: '3px solid white',
              maxWidth: '100%',
            }}
          />
          <Typography variant="h4" sx={{ color: 'white', mb: 1, textAlign: 'center' }}>
            Yakup Şimşek
          </Typography>
          <Typography variant="h6" sx={{ color: 'white', mb: 2, textAlign: 'center' }}>
            Eğitim Teknoloğu
          </Typography>
          <Box>
            <IconButton
              sx={{
                transition: 'all 0.3s ease',
                '&:hover svg': {
                  transform: 'scale(1.3)',
                  filter:
                    'drop-shadow(0 0 32px rgb(0, 0, 0)) drop-shadow(0 0 20px rgb(255, 255, 255))',
                },
              }}
            >
              <LinkedInIcon sx={{ fontSize: 30, ...neonIconStyle }} />
            </IconButton>

            <IconButton
              sx={{
                transition: 'all 0.3s ease',
                '&:hover svg': {
                  transform: 'scale(1.3)',
                  filter:
                    'drop-shadow(0 0 32px rgb(0, 0, 0)) drop-shadow(0 0 20px rgb(255, 255, 255))',
                },
              }}
            >
              <GitHubIcon sx={{ fontSize: 30, ...neonIconStyle }} />
            </IconButton>

            <IconButton
              sx={{
                transition: 'all 0.3s ease',
                '&:hover svg': {
                  transform: 'scale(1.3)',
                  filter:
                    'drop-shadow(0 0 32px rgb(0, 0, 0)) drop-shadow(0 0 20px rgb(255, 255, 255))',
                },
              }}
            >
              <InstagramIcon sx={{ fontSize: 30, ...neonIconStyle }} />
            </IconButton>
          </Box>
        </Box>

        {/* Sağ Kısım */}
        <Box
          sx={{
            width: { xs: '90%', md: '70%' },
            bgcolor: 'white',
            p: { xs: 2, sm: 3, md: 4 },
            marginRight: { xs: 50, sm: 5, md: 5 },
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center',
            borderRadius: { md: 4 },
            zIndex: 1,
            maxWidth: '100%',
          }}
        >
          <Typography
            variant="h4"
            sx={{
              color: '#001f4d',
              fontWeight: 'bold',
              mb: 3,
              textAlign: 'center',
              wordBreak: 'break-word',
            }}
          >
            Hakkımda
          </Typography>

          {loading ? (
            <CircularProgress />
          ) : aboutData.length === 0 ? (
            <Typography variant="body1" sx={{ color: '#333', textAlign: 'center' }}>
              Henüz bir içerik yok.
            </Typography>
          ) : (
            aboutData.map((item) => (
              <Box key={item.id} sx={{ mb: 2, display: 'flex', alignItems: 'center', position: 'relative' }}>
  <Typography
    variant="body1"
    sx={{
      color: '#333',
      wordBreak: 'break-word',
      whiteSpace: 'pre-wrap',
      flex: 1,
      textAlign: 'center',
    }}
  >
    • {item.text}
  </Typography>

  {isAdmin && (
    <Box sx={{ ml: 2, display: 'flex', gap: 1 }}>
      <Button size="small" variant="outlined" onClick={() => handleEditOpen(item)}>
        Düzenle
      </Button>
      <Button
        size="small"
        variant="outlined"
        color="error"
        onClick={() => handleDeleteOpen(item)}
      >
        Sil
      </Button>
    </Box>
  )}
</Box>

            ))
          )}

          <Box sx={{ display: 'flex', alignItems: 'center', mt: 2, flexWrap: 'wrap' }}>
            <MailOutlineIcon sx={{ mr: 1 }} />
            <Box
              onClick={() => window.open('mailto:yakupsimseke@gmail.com')}
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 1,
                px: 2,
                py: 1,
                bgcolor: 'white',
                borderRadius: 20,
                cursor: 'pointer',
                border: '2px solid rgb(11, 151, 194)',
                color: 'black',
                transition: '0.3s',
                '&:hover': {
                  bgcolor: 'rgb(11, 151, 194)',
                  color: 'white',
                  border: '2px solid rgb(255, 255, 255)',
                },
                '&:hover svg': {
                  color: 'white',
                },
                mt: { xs: 1, md: 0 },
              }}
            >
              <Typography variant="body1" sx={{ fontWeight: '20px' }}>
                Benimle İletişime Geçin
              </Typography>
              <ArrowForwardIosIcon
                sx={{
                  color: 'rgb(11, 151, 194)',
                  fontSize: 16,
                  transition: '0.3s',
                }}
              />
            </Box>
          </Box>
        </Box>
      </Box>

      {/* Düzenleme Dialog */}
      <Dialog open={editOpen} onClose={handleEditClose} maxWidth="sm" fullWidth>
        <DialogTitle>Metni Düzenle</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Metin"
            type="text"
            fullWidth
            multiline
            minRows={3}
            value={currentEdit.text}
            onChange={(e) =>
              setCurrentEdit((prev) => ({
                ...prev,
                text: e.target.value,
              }))
            }
            sx={{ whiteSpace: 'pre-wrap' }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleEditClose} disabled={editLoading}>
            İptal
          </Button>
          <Button onClick={handleEditSave} disabled={editLoading} variant="contained">
            {editLoading ? 'Kaydediliyor...' : 'Kaydet'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Silme Dialog */}
      <Dialog open={deleteOpen} onClose={handleDeleteClose} maxWidth="xs" fullWidth>
        <DialogTitle>Silme Onayı</DialogTitle>
        <DialogContent>
          <Typography sx={{ mb: 2 }}>Bu maddeyi silmek istediğinize emin misiniz?</Typography>
          <Typography sx={{ fontStyle: 'italic', mb: 1 }}>"• {currentDelete.text}"</Typography>
          <FormControlLabel
            control={
              <Checkbox checked={confirmDelete} onChange={(e) => setConfirmDelete(e.target.checked)} />
            }
            label="Silme işlemini onaylıyorum"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleDeleteClose} disabled={deleteLoading}>
            İptal
          </Button>
          <Button
            onClick={handleDeleteConfirm}
            disabled={!confirmDelete || deleteLoading}
            variant="contained"
            color="error"
          >
            {deleteLoading ? 'Siliniyor...' : 'Sil'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default About;
